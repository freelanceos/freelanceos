"use client"

import type React from "react"

import { useState, useEffect, useMemo } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Alert, AlertDescription } from "@/components/ui/alert"
import {
  ShoppingCart,
  MessageSquare,
  Eye,
  CheckCircle,
  XCircle,
  Clock,
  Mail,
  Phone,
  CreditCard,
  Calendar,
  ExternalLink,
  RefreshCw,
  LogOut,
  User,
  AlertCircle,
  Loader2,
} from "lucide-react"

interface Order {
  id: string
  name: string
  email: string
  phone: string
  payment_method: string
  transfer_number: string
  receipt_url?: string
  status: "pending" | "confirmed" | "completed" | "canceled"
  created_at: string
}

interface Contact {
  id: string
  name: string
  email: string
  phone?: string
  message: string
  status: "new" | "read" | "replied"
  created_at: string
}

interface AdminUser {
  id: string
  email: string
  role: string
}

export default function AdminDashboard() {
  const [orders, setOrders] = useState<Order[]>([])
  const [contacts, setContacts] = useState<Contact[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [adminUser, setAdminUser] = useState<AdminUser | null>(null)
  const [loginForm, setLoginForm] = useState({ email: "", password: "" })
  const [loginLoading, setLoginLoading] = useState(false)

  // Search and Filter States
  const [orderSearchTerm, setOrderSearchTerm] = useState("")
  const [contactSearchTerm, setContactSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<string>("all")
  const [contactStatusFilter, setContactStatusFilter] = useState<string>("all")
  const [dateFilter, setDateFilter] = useState<string>("all")

  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null)
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null)
  const [replyMessage, setReplyMessage] = useState("")
  const [autoRefresh, setAutoRefresh] = useState(true)

  // Check authentication on mount
  useEffect(() => {
    checkAuthStatus()
  }, [])

  // Auto refresh every 60 seconds
  useEffect(() => {
    if (!isAuthenticated || !autoRefresh) return

    const interval = setInterval(() => {
      fetchData()
    }, 60000)

    return () => clearInterval(interval)
  }, [isAuthenticated, autoRefresh])

  // Initial data fetch
  useEffect(() => {
    if (isAuthenticated) {
      fetchData()
    }
  }, [isAuthenticated])

  const checkAuthStatus = async () => {
    try {
      const response = await fetch("/api/auth/verify")

      // Check if response is ok and content-type is JSON
      const contentType = response.headers.get("content-type")
      if (!contentType || !contentType.includes("application/json")) {
        setIsAuthenticated(false)
        setAdminUser(null)
        return
      }

      const result = await response.json()

      if (result.success) {
        setIsAuthenticated(true)
        setAdminUser(result.user)
      } else {
        setIsAuthenticated(false)
        setAdminUser(null)
      }
    } catch (error) {
      console.error("Error checking auth status:", error)
      setIsAuthenticated(false)
      setAdminUser(null)
    } finally {
      setLoading(false)
    }
  }

  // Advanced search and filter for orders
  const filteredOrders = useMemo(() => {
    let filtered = orders

    // Search filter
    if (orderSearchTerm.trim()) {
      const searchLower = orderSearchTerm.toLowerCase()
      filtered = filtered.filter(
        (order) =>
          order.name.toLowerCase().includes(searchLower) ||
          order.email.toLowerCase().includes(searchLower) ||
          order.phone.includes(searchLower) ||
          order.payment_method.toLowerCase().includes(searchLower) ||
          order.transfer_number.toLowerCase().includes(searchLower) ||
          order.id.toLowerCase().includes(searchLower),
      )
    }

    // Status filter
    if (statusFilter !== "all") {
      filtered = filtered.filter((order) => order.status === statusFilter)
    }

    // Date filter
    if (dateFilter !== "all") {
      const now = new Date()
      const filterDate = new Date()

      switch (dateFilter) {
        case "today":
          filterDate.setHours(0, 0, 0, 0)
          filtered = filtered.filter((order) => new Date(order.created_at) >= filterDate)
          break
        case "week":
          filterDate.setDate(now.getDate() - 7)
          filtered = filtered.filter((order) => new Date(order.created_at) >= filterDate)
          break
        case "month":
          filterDate.setMonth(now.getMonth() - 1)
          filtered = filtered.filter((order) => new Date(order.created_at) >= filterDate)
          break
      }
    }

    return filtered
  }, [orders, orderSearchTerm, statusFilter, dateFilter])

  // Advanced search and filter for contacts
  const filteredContacts = useMemo(() => {
    let filtered = contacts

    // Search filter
    if (contactSearchTerm.trim()) {
      const searchLower = contactSearchTerm.toLowerCase()
      filtered = filtered.filter(
        (contact) =>
          contact.name.toLowerCase().includes(searchLower) ||
          contact.email.toLowerCase().includes(searchLower) ||
          (contact.phone && contact.phone.includes(searchLower)) ||
          contact.message.toLowerCase().includes(searchLower) ||
          contact.id.toLowerCase().includes(searchLower),
      )
    }

    // Status filter
    if (contactStatusFilter !== "all") {
      filtered = filtered.filter((contact) => contact.status === contactStatusFilter)
    }

    return filtered
  }, [contacts, contactSearchTerm, contactStatusFilter])

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoginLoading(true)
    setError(null)

    try {
      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: loginForm.email,
          password: loginForm.password,
        }),
      })

      // Check if response is ok and content-type is JSON
      const contentType = response.headers.get("content-type")
      if (!contentType || !contentType.includes("application/json")) {
        const textResponse = await response.text()
        console.error("Non-JSON response:", textResponse)
        setError("خطأ في الخادم - استجابة غير صحيحة")
        return
      }

      const result = await response.json()

      if (response.ok && result.success) {
        setIsAuthenticated(true)
        setAdminUser(result.user)
        setLoginForm({ email: "", password: "" })
      } else {
        setError(result.message || "فشل في تسجيل الدخول")
      }
    } catch (error) {
      console.error("Login error:", error)
      setError("حدث خطأ في الاتصال بالخادم")
    } finally {
      setLoginLoading(false)
    }
  }

  const handleLogout = async () => {
    try {
      await fetch("/api/auth/logout", { method: "POST" })
      setIsAuthenticated(false)
      setAdminUser(null)
      // Clear search terms on logout
      setOrderSearchTerm("")
      setContactSearchTerm("")
      setStatusFilter("all")
      setContactStatusFilter("all")
      setDateFilter("all")
      setError(null)
    } catch (error) {
      console.error("Logout error:", error)
    }
  }

  const clearOrderSearch = () => {
    setOrderSearchTerm("")
    setStatusFilter("all")
    setDateFilter("all")
  }

  const clearContactSearch = () => {
    setContactSearchTerm("")
    setContactStatusFilter("all")
  }

  const fetchData = async () => {
    try {
      setError(null)

      // Fetch orders
      const ordersResponse = await fetch("/api/orders")
      let ordersData = { success: false, orders: [] }

      if (ordersResponse.ok) {
        try {
          ordersData = await ordersResponse.json()
        } catch (jsonError) {
          console.error("Error parsing orders JSON:", jsonError)
          ordersData = { success: false, orders: [] }
        }
      } else {
        console.error("Orders API error:", ordersResponse.status, ordersResponse.statusText)
      }

      // Fetch contacts
      const contactsResponse = await fetch("/api/contact")
      let contactsData = { success: false, contacts: [] }

      if (contactsResponse.ok) {
        try {
          contactsData = await contactsResponse.json()
        } catch (jsonError) {
          console.error("Error parsing contacts JSON:", jsonError)
          contactsData = { success: false, contacts: [] }
        }
      } else {
        console.error("Contacts API error:", contactsResponse.status, contactsResponse.statusText)
      }

      // Set data even if API calls failed
      setOrders(ordersData.success ? ordersData.orders || [] : [])
      setContacts(contactsData.success ? contactsData.contacts || [] : [])

      // Show error if both failed
      if (!ordersData.success && !contactsData.success) {
        setError("فشل في تحميل البيانات. تأكد من إعداد قاعدة البيانات.")
      }
    } catch (error) {
      console.error("Error fetching data:", error)
      setError("حدث خطأ في الاتصال بالخادم")
      setOrders([])
      setContacts([])
    } finally {
      setLoading(false)
    }
  }

  const updateOrderStatus = async (orderId: string, newStatus: string) => {
    try {
      const response = await fetch(`/api/orders/${orderId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ status: newStatus }),
      })

      const result = await response.json()

      if (response.ok && result.success) {
        setOrders(orders.map((order) => (order.id === orderId ? { ...order, status: newStatus as any } : order)))
        setSelectedOrder(null)
        setError(null)
        // Show success message
        console.log("تم تحديث حالة الطلب بنجاح")
      } else {
        throw new Error(result.message || "Failed to update status")
      }
    } catch (error) {
      console.error("Error updating order status:", error)
      setError("حدث خطأ أثناء تحديث حالة الطلب")
    }
  }

  const updateContactStatus = async (contactId: string, newStatus: string) => {
    try {
      const response = await fetch(`/api/contact/${contactId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ status: newStatus }),
      })

      const result = await response.json()

      if (response.ok && result.success) {
        setContacts(
          contacts.map((contact) => (contact.id === contactId ? { ...contact, status: newStatus as any } : contact)),
        )
        setError(null)
        console.log("تم تحديث حالة الرسالة بنجاح")
      } else {
        throw new Error(result.message || "Failed to update status")
      }
    } catch (error) {
      console.error("Error updating contact status:", error)
      setError("حدث خطأ أثناء تحديث حالة الرسالة")
    }
  }

  const sendReply = async () => {
    if (!selectedContact || !replyMessage.trim()) return

    try {
      const response = await fetch("/api/contact/reply", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contactId: selectedContact.id,
          replyMessage,
          recipientEmail: selectedContact.email,
          recipientName: selectedContact.name,
        }),
      })

      const result = await response.json()

      if (response.ok && result.success) {
        // Update contact status to replied
        setContacts(
          contacts.map((contact) =>
            contact.id === selectedContact.id ? { ...contact, status: "replied" as const } : contact,
          ),
        )
        setSelectedContact(null)
        setReplyMessage("")
        setError(null)
        console.log("تم إرسال الرد بنجاح")
      } else {
        throw new Error(result.message || "Failed to send reply")
      }
    } catch (error) {
      console.error("Error sending reply:", error)
      setError("حدث خطأ أثناء إرسال الرد")
    }
  }

  const exportToCSV = (data: any[], filename: string) => {
    if (data.length === 0) return

    const csvContent = [Object.keys(data[0]).join(","), ...data.map((row) => Object.values(row).join(","))].join("\n")

    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${filename}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      pending: { label: "في الانتظار", variant: "secondary" as const, icon: Clock },
      confirmed: { label: "مؤكد", variant: "default" as const, icon: CheckCircle },
      completed: { label: "مكتمل", variant: "default" as const, icon: CheckCircle },
      canceled: { label: "ملغي", variant: "destructive" as const, icon: XCircle },
      new: { label: "جديد", variant: "secondary" as const, icon: MessageSquare },
      read: { label: "مقروء", variant: "default" as const, icon: Eye },
      replied: { label: "تم الرد", variant: "default" as const, icon: CheckCircle },
    }

    const config = statusConfig[status as keyof typeof statusConfig]
    if (!config) return <Badge variant="secondary">{status}</Badge>

    const Icon = config.icon

    return (
      <Badge variant={config.variant} className="flex items-center gap-1">
        <Icon className="w-3 h-3" />
        {config.label}
      </Badge>
    )
  }

  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleString("ar-EG", {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      })
    } catch {
      return dateString
    }
  }

  const highlightSearchTerm = (text: string, searchTerm: string) => {
    if (!searchTerm.trim()) return text

    const regex = new RegExp(`(${searchTerm})`, "gi")
    const parts = text.split(regex)

    return parts.map((part, index) =>
      regex.test(part) ? (
        <mark key={index} className="bg-yellow-200 px-1 rounded">
          {part}
        </mark>
      ) : (
        part
      ),
    )
  }

  const stats = {
    totalOrders: orders.length,
    filteredOrders: filteredOrders.length,
    pendingOrders: orders.filter((o) => o.status === "pending").length,
    completedOrders: orders.filter((o) => o.status === "completed").length,
    totalContacts: contacts.length,
    filteredContacts: filteredContacts.length,
    newContacts: contacts.filter((c) => c.status === "new").length,
  }

  // Loading state for initial auth check
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-pink-500 mx-auto mb-4"></div>
          <p className="text-gray-600">جاري التحقق من الجلسة...</p>
        </div>
      </div>
    )
  }

  // Login Form
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold">تسجيل الدخول</CardTitle>
            <p className="text-gray-600">لوحة تحكم الإدارة</p>
          </CardHeader>
          <CardContent>
            {error && (
              <Alert variant="destructive" className="mb-4">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            <form onSubmit={handleLogin} className="space-y-4">
              <div>
                <Label htmlFor="email">البريد الإلكتروني</Label>
                <Input
                  id="email"
                  type="email"
                  value={loginForm.email}
                  onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}
                  required
                  disabled={loginLoading}
                  placeholder="admin@freelanceos.online"
                />
              </div>
              <div>
                <Label htmlFor="password">كلمة المرور</Label>
                <Input
                  id="password"
                  type="password"
                  value={loginForm.password}
                  onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}
                  required
                  disabled={loginLoading}
                />
              </div>
              <Button type="submit" className="w-full" disabled={loginLoading}>
                {loginLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    جاري تسجيل الدخول...
                  </>
                ) : (
                  <>
                    <User className="w-4 h-4 mr-2" />
                    تسجيل الدخول
                  </>
                )}
              </Button>
            </form>
            <div className="mt-4 text-sm text-gray-600 text-center">
              <p>البريد الافتراضي: admin@freelanceos.online</p>
              <p>كلمة المرور: admin123</p>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">لوحة تحكم الإدارة</h1>
            <p className="text-gray-600">مرحباً {adminUser?.email} - إدارة الطلبات ورسائل العملاء</p>
          </div>
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setAutoRefresh(!autoRefresh)}
              className={autoRefresh ? "bg-green-50 border-green-200" : ""}
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${autoRefresh ? "animate-spin" : ""}`} />
              {autoRefresh ? "التحديث التلقائي مفعل" : "التحديث التلقائي معطل"}
            </Button>
            <Button variant="outline" size="sm" onClick={fetchData}>
              <RefreshCw className="w-4 h-4 mr-2" />
              تحديث البيانات
            </Button>
            <Button variant="outline" size="sm" onClick={handleLogout}>
              <LogOut className="w-4 h-4 mr-2" />
              تسجيل الخروج
            </Button>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <ShoppingCart className="h-8 w-8 text-pink-500" />
                <div className="mr-4">
                  <p className="text-sm font-medium text-gray-600">إجمالي الطلبات</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.totalOrders}</p>
                  {stats.filteredOrders !== stats.totalOrders && (
                    <p className="text-xs text-gray-500">({stats.filteredOrders} مفلتر)</p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Clock className="h-8 w-8 text-yellow-500" />
                <div className="mr-4">
                  <p className="text-sm font-medium text-gray-600">طلبات معلقة</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.pendingOrders}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <CheckCircle className="h-8 w-8 text-green-500" />
                <div className="mr-4">
                  <p className="text-sm font-medium text-gray-600">طلبات مكتملة</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.completedOrders}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <MessageSquare className="h-8 w-8 text-blue-500" />
                <div className="mr-4">
                  <p className="text-sm font-medium text-gray-600">إجمالي الرسائل</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.totalContacts}</p>
                  {stats.filteredContacts !== stats.totalContacts && (
                    <p className="text-xs text-gray-500">({stats.filteredContacts} مفلتر)</p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Mail className="h-8 w-8 text-purple-500" />
                <div className="mr-4">
                  <p className="text-sm font-medium text-gray-600">رسائل جديدة</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.newContacts}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <Tabs defaultValue="orders" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="orders">الطلبات ({stats.totalOrders})</TabsTrigger>
            <TabsTrigger value="contacts">رسائل الاتصال ({stats.totalContacts})</TabsTrigger>
          </TabsList>

          {/* Orders Tab */}
          <TabsContent value="orders">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <ShoppingCart className="w-5 h-5" />
                    الطلبات الأخيرة
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => exportToCSV(filteredOrders, "orders")}
                      disabled={filteredOrders.length === 0}
                    >
                      تصدير CSV
                    </Button>
                  </div>
                </div>

                {/* Search and Filter Controls */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-4">
                  <div>
                    <Input
                      placeholder="البحث في الطلبات..."
                      value={orderSearchTerm}
                      onChange={(e) => setOrderSearchTerm(e.target.value)}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <Select value={statusFilter} onValueChange={setStatusFilter}>
                      <SelectTrigger>
                        <SelectValue placeholder="فلترة بالحالة" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">جميع الحالات</SelectItem>
                        <SelectItem value="pending">pending </SelectItem>
                        <SelectItem value="confirmed">confirmed</SelectItem>
                        <SelectItem value="completed">completed</SelectItem>
                        <SelectItem value="canceled">canceled</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Select value={dateFilter} onValueChange={setDateFilter}>
                      <SelectTrigger>
                        <SelectValue placeholder="فلترة بالتاريخ" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">جميع التواريخ</SelectItem>
                        <SelectItem value="today">اليوم</SelectItem>
                        <SelectItem value="week">هذا الأسبوع</SelectItem>
                        <SelectItem value="month">هذا الشهر</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Button variant="outline" onClick={clearOrderSearch} className="w-full">
                      مسح الفلاتر
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {filteredOrders.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      {orders.length === 0 ? "لا توجد طلبات حتى الآن" : "لا توجد نتائج للبحث الحالي"}
                    </div>
                  ) : (
                    filteredOrders.map((order) => (
                      <Card key={order.id} className="border-r-4 border-pink-500">
                        <CardContent className="p-6">
                          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                            <div className="space-y-2">
                              <div className="flex items-center gap-2">
                                <h3 className="font-semibold text-lg">
                                  {highlightSearchTerm(order.name, orderSearchTerm)}
                                </h3>
                                {getStatusBadge(order.status)}
                              </div>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-600">
                                <div className="flex items-center gap-1">
                                  <Mail className="w-4 h-4" />
                                  {highlightSearchTerm(order.email, orderSearchTerm)}
                                </div>
                                <div className="flex items-center gap-1">
                                  <Phone className="w-4 h-4" />
                                  {highlightSearchTerm(order.phone, orderSearchTerm)}
                                </div>
                                <div className="flex items-center gap-1">
                                  <CreditCard className="w-4 h-4" />
                                  {order.payment_method}
                                </div>
                                <div className="flex items-center gap-1">
                                  <Calendar className="w-4 h-4" />
                                  {formatDate(order.created_at)}
                                </div>
                              </div>
                              <p className="text-sm">
                                <strong>رقم التحويل:</strong>{" "}
                                {highlightSearchTerm(order.transfer_number, orderSearchTerm)}
                              </p>
                              <p className="text-xs text-gray-500">
                                <strong>رقم الطلب:</strong> {order.id}
                              </p>
                            </div>
                            <div className="flex gap-2">
                              {order.receipt_url && (
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => window.open(order.receipt_url, "_blank")}
                                >
                                  <ExternalLink className="w-4 h-4 mr-1" />
                                  عرض الإيصال
                                </Button>
                              )}
                              <Select
                                value={order.status}
                                onValueChange={(newStatus) => updateOrderStatus(order.id, newStatus)}
                              >
                                <SelectTrigger className="w-40">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="pending">
                                    <div className="flex items-center gap-2">
                                      <Clock className="w-4 h-4 text-yellow-500" />
                                      pending
                                    </div>
                                  </SelectItem>
                                  <SelectItem value="confirmed">
                                    <div className="flex items-center gap-2">
                                      <CheckCircle className="w-4 h-4 text-green-500" />
                                      confirmed
                                    </div>
                                  </SelectItem>
                                  <SelectItem value="completed">
                                    <div className="flex items-center gap-2">
                                      <CheckCircle className="w-4 h-4 text-blue-500" />
                                      completed
                                    </div>
                                  </SelectItem>
                                  <SelectItem value="canceled">
                                    <div className="flex items-center gap-2">
                                      <XCircle className="w-4 h-4 text-red-500" />
                                      canceled
                                    </div>
                                  </SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Contacts Tab */}
          <TabsContent value="contacts">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="w-5 h-5" />
                    رسائل الاتصال
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => exportToCSV(filteredContacts, "contacts")}
                      disabled={filteredContacts.length === 0}
                    >
                      تصدير CSV
                    </Button>
                  </div>
                </div>

                {/* Search and Filter Controls */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                  <div>
                    <Input
                      placeholder="البحث في الرسائل..."
                      value={contactSearchTerm}
                      onChange={(e) => setContactSearchTerm(e.target.value)}
                      className="w-full"
                    />
                  </div>
                  <div>
                    <Select value={contactStatusFilter} onValueChange={setContactStatusFilter}>
                      <SelectTrigger>
                        <SelectValue placeholder="فلترة بالحالة" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">جميع الحالات</SelectItem>
                        <SelectItem value="new">جديد</SelectItem>
                        <SelectItem value="read">مقروء</SelectItem>
                        <SelectItem value="replied">تم الرد</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Button variant="outline" onClick={clearContactSearch} className="w-full">
                      مسح الفلاتر
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {filteredContacts.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      {contacts.length === 0 ? "لا توجد رسائل حتى الآن" : "لا توجد نتائج للبحث الحالي"}
                    </div>
                  ) : (
                    filteredContacts.map((contact) => (
                      <Card key={contact.id} className="border-r-4 border-blue-500">
                        <CardContent className="p-6">
                          <div className="space-y-3">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-2">
                                <h3 className="font-semibold text-lg">
                                  {highlightSearchTerm(contact.name, contactSearchTerm)}
                                </h3>
                                {getStatusBadge(contact.status)}
                              </div>
                              <span className="text-sm text-gray-500">{formatDate(contact.created_at)}</span>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-600">
                              <div className="flex items-center gap-1">
                                <Mail className="w-4 h-4" />
                                {highlightSearchTerm(contact.email, contactSearchTerm)}
                              </div>
                              {contact.phone && (
                                <div className="flex items-center gap-1">
                                  <Phone className="w-4 h-4" />
                                  {highlightSearchTerm(contact.phone, contactSearchTerm)}
                                </div>
                              )}
                            </div>
                            <div className="bg-gray-50 p-4 rounded-lg">
                              <p className="text-sm leading-relaxed whitespace-pre-wrap">
                                {highlightSearchTerm(contact.message, contactSearchTerm)}
                              </p>
                            </div>
                            <p className="text-xs text-gray-500">
                              <strong>رقم الرسالة:</strong> {contact.id}
                            </p>
                            {/* Quick Reply Section */}
                            {selectedContact?.id === contact.id ? (
                              <div className="bg-blue-50 p-4 rounded-lg border-2 border-blue-200">
                                <div className="space-y-3">
                                  <div className="flex items-center justify-between">
                                    <Label className="text-sm font-semibold text-blue-800">اكتب ردك السريع:</Label>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => {
                                        setSelectedContact(null)
                                        setReplyMessage("")
                                      }}
                                    >
                                      <XCircle className="w-4 h-4" />
                                    </Button>
                                  </div>
                                  <Textarea
                                    value={replyMessage}
                                    onChange={(e) => setReplyMessage(e.target.value)}
                                    placeholder="اكتب ردك هنا... سيتم إرساله إلى البريد الإلكتروني للعميل"
                                    rows={4}
                                    className="resize-none"
                                  />
                                  <div className="flex gap-2">
                                    <Button
                                      onClick={sendReply}
                                      disabled={!replyMessage.trim()}
                                      size="sm"
                                      className="flex-1"
                                    >
                                      <Mail className="w-4 h-4 mr-2" />
                                      إرسال الرد
                                    </Button>
                                    <Button
                                      variant="outline"
                                      size="sm"
                                      onClick={() => {
                                        setSelectedContact(null)
                                        setReplyMessage("")
                                      }}
                                    >
                                      إلغاء
                                    </Button>
                                  </div>
                                  <p className="text-xs text-blue-600">سيتم إرسال الرد إلى: {contact.email}</p>
                                </div>
                              </div>
                            ) : (
                              <div className="flex gap-2">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => window.open(`mailto:${contact.email}`, "_blank")}
                                >
                                  <Mail className="w-4 h-4 mr-1" />
                                  الرد بالبريد
                                </Button>
                                <Select
                                  value={contact.status}
                                  onValueChange={(newStatus) => updateContactStatus(contact.id, newStatus)}
                                >
                                  <SelectTrigger className="w-32">
                                    <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="new">
                                      <div className="flex items-center gap-2">
                                        <MessageSquare className="w-4 h-4 text-gray-500" />
                                        جديد
                                      </div>
                                    </SelectItem>
                                    <SelectItem value="read">
                                      <div className="flex items-center gap-2">
                                        <Eye className="w-4 h-4 text-blue-500" />
                                        مقروء
                                      </div>
                                    </SelectItem>
                                    <SelectItem value="replied">
                                      <div className="flex items-center gap-2">
                                        <CheckCircle className="w-4 h-4 text-green-500" />
                                        تم الرد
                                      </div>
                                    </SelectItem>
                                  </SelectContent>
                                </Select>

                                {/* Quick Status Update Buttons */}
                                <div className="flex gap-1">
                                  {contact.status === "new" && (
                                    <Button
                                      variant="outline"
                                      size="sm"
                                      onClick={() => updateContactStatus(contact.id, "read")}
                                    >
                                      <Eye className="w-4 h-4 mr-1" />
                                      تم القراءة
                                    </Button>
                                  )}
                                </div>

                                <Button
                                  variant="default"
                                  size="sm"
                                  onClick={() => {
                                    setSelectedContact(contact)
                                    setReplyMessage("")
                                    if (contact.status === "new") {
                                      updateContactStatus(contact.id, "read")
                                    }
                                  }}
                                >
                                  <MessageSquare className="w-4 h-4 mr-1" />
                                  رد سريع
                                </Button>
                              </div>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
